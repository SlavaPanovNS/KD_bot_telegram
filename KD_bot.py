from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup

import tokenKD
import time

import sqlite3
from sqlite3 import Error

import random
from datetime import date, timedelta

storage = MemoryStorage()

# –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
def get_today():
    today = date.today()
    return today

# –°–ø–∏—Å–æ–∫ —Å—É–ø–æ–≤
soup_list = ['–ë–æ—Ä—â–∏–∫', '–°–≤–µ–∂–∏–µ –©–∏', '–ì–æ—Ä–æ—Ö–æ–≤—ã–π', '–£—Ö–∞', '–ö–∏—Å–ª—ã–µ –©–∏', '–†–∞—Å—Å–æ–ª—å–Ω–∏–∫', '–°—É–ø —Å –ì–∞–ª—É—à–∫–∞–º–∏',
             '–•–∞—Ä—á–æ', '–¢–æ–º–∞—Ç–Ω—ã–π', '–°—É–ø —Å —Ñ—Ä–∏–∫–∞–¥–µ–ª—å–∫–∞–º–∏','–ö—É—Ä–∏–Ω—ã–π —Å –ª–∞–ø—à–æ–π', '–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–π', '–ì—Ä–∏–±–Ω–æ–π',
             '–®—É—Ä–ø–∞', '–ú–æ–ª–æ—á–Ω—ã–π', '–©–∞–≤–µ–ª–µ–≤—ã–π', '–§–æ –ë–æ', '–ì–æ—Ä–æ—Ö–æ–≤—ã–π',
             '–¢—ã–∫–≤–µ–Ω–Ω—ã–π', '–°–µ–≥–æ–¥–Ω—è –±–µ–∑ —Å—É–ø–∞ –¥–Ω—è. –ü—Ä–æ—Å—Ç–æ –¥–æ—à–∏–∫–∞ –ø–æ–∫—É—à–∞–µ–º']

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ë–î
def create_connection(path):
    connection = None
    try:
        connection = sqlite3.connect(path)
        print('Connection to SQLite DB successful.')
    except Error as e:
        print(f'The error "{e}" occured.')

    return connection

# –§—É–Ω–∫—Ü–∏—è –≤–Ω–µ—Å–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
def execute_query(connection, query):
    cursor = connection.cursor()
    try:
        cursor.execute(query)
        connection.commit()
        print('Query executed succesfully.')
    except Error as e:
        print(f'The error "{e}" occured.')

# –§—É–Ω–∫—Ü–∏—è –≤–Ω–µ—Å–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å "?"
def cursor_insert(connection, query, val):
    cursor = connection.cursor()
    try:
        cursor.execute(query, val)
        connection.commit()
        print('Query executed succesfully.')
    except Error as e:
        print(f'The error "{e}" occured.')

# –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
def execute_read_query(connection, query):
    cursor = connection.cursor()
    result = None
    try:
        cursor.execute(query)
        result = cursor.fetchall()
        return result
    except Error as e:
        print(f'The error "{e}" occured.')

create_chats_table = """
CREATE TABLE IF NOT EXISTS chats (
    chat_id INTEGER PRIMARY KEY,
    date DATE,
    winner TEXT);
"""
create_users_table = """
CREATE TABLE IF NOT EXISTS users (
    chat_id INTEGER,
    user_id INTEGER,
    username TEXT NOT NULL,
    score INTEGER NOT NULL);
"""
select_users_for_stat = 'SELECT username, score FROM users'
select_chats = 'SELECT chat_id FROM chats'

insert_chats = """
INSERT or IGNORE INTO chats 
(chat_id, date) VALUES (?,?);
"""
insert_users = """
INSERT or IGNORE INTO users 
(chat_id, user_id, username, score) VALUES (?,?,?,?);
"""

def select_user_id(chat_id):
    return f'SELECT user_id FROM users WHERE chat_id = {chat_id}'

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ –ë–î
def check_chats(chat_id):
    all_chats = execute_read_query(connection, select_chats)
    chats = [x[0] for x in all_chats]
    if chat_id in chats:
        return True
    return False

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —é–∑–µ—Ä–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ –ë–î
def check_user_id(chat_id, user_id):
    selected_user_ids = select_user_id(chat_id)
    all_users = execute_read_query(connection, selected_user_ids)
    game = [x[0] for x in all_users]
    if user_id in game:
        return True
    return False

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –¥–∞—Ç—ã
def check_date(chat_id):
    today = get_today()
    cursor = connection.cursor()
    cursor.execute(f'SELECT date FROM chats WHERE chat_id = {chat_id}')
    game_date = cursor.fetchall()
    if game_date[0][0] != str(today):
        return True
    return False

# –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
def get_winner(chat_id):
    cursor = connection.cursor()
    cursor.execute(f'SELECT username FROM users WHERE chat_id = {chat_id}')
    all_users = cursor.fetchall()
    game = [x[0] for x in all_users]
    winner = random.choice(game)
    return str(winner)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_stat(chat_id):
    cursor = connection.cursor()
    cursor.execute(f'SELECT username, score FROM users WHERE chat_id = {chat_id} ORDER BY score DESC')
    all_stats = cursor.fetchall()
    statkd = 'üèÜ–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–¥:\n'
    index = 1
    for i in all_stats:
        statkd += f'{index}.{i[0]} : {i[1]}\n'
        index += 1
    return statkd

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def delete_user(chat_id, user_id):
    cursor = connection.cursor()
    cursor.execute(f"DELETE FROM users WHERE chat_id = {chat_id} AND user_id = '{user_id}'")
    connection.commit()

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è score –∏ date
def update_score_and_date(chat_id, winner):
    today = get_today()
    cursor = connection.cursor()
    cursor.execute(f"UPDATE users SET score = score+1 WHERE chat_id = {chat_id} AND username = '{winner}'")
    connection.commit()
    cursor.execute(f"UPDATE chats SET date = '{today}' WHERE chat_id = {chat_id}")
    connection.commit()
    cursor.execute(f"UPDATE chats SET winner = '{winner}' WHERE chat_id = {chat_id}")
    connection.commit()

# –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏
def change_name(user_id, new_name):
    cursor = connection.cursor()
    cursor.execute(f"UPDATE users SET username = '{new_name}' WHERE user_id = '{user_id}'")
    connection.commit()

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
def get_today_winner(chat_id):
    cursor = connection.cursor()
    cursor.execute(f'SELECT winner FROM chats WHERE chat_id = {chat_id}')
    winner = cursor.fetchall()
    return winner[0][0]

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
connection =  create_connection('D:\SQL\db\kd.db')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
execute_query(connection, create_chats_table)
execute_query(connection, create_users_table)

# –°–æ–∑–¥–∞–Ω–∏–µ –ë–æ—Ç–∞ –∏ –î–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=tokenKD.tok)
dp = Dispatcher(bot, storage=storage)

class Form(StatesGroup):
    name = State()

# --------------------------------------------------–ö–æ–º–∞–Ω–¥—ã ------------------------------------------------------
@dp.message_handler(commands=['start'])
async def start_command(message : types.Message):
    username = message.from_user.username
    if username == None:
        await message.reply('–ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –º—ã –±—É–¥–µ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∏–≥—Ä—É.')
    else:
        await message.answer('–ü—Ä–∏–≤–µ—Ç! @' + username + ', —Ç–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –º—ã –±—É–¥–µ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∏–≥—Ä—É.')

@dp.message_handler(commands=['help'])
async def start_command(message : types.Message):
    await message.answer('–ò–≥—Ä–∞ "–ö—Ä–∞—Å–∞–≤—á–∏–∫ –î–Ω—è". –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞—à –±–æ—Ç –ø–æ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å\
–∫—Ä–∞—Å–∞–≤—á–∏–∫–∞ –¥–Ω—è –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ.\n/join - —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É\n/end - —á—Ç–æ–±—ã –ø–æ–∫–∏–Ω—É—Ç—å\n\
/run - —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å\n/stat - —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–±–µ–¥\n/soup - —É–∑–Ω–∞—Ç—å —Å—É–ø—á–∏–∫ –¥–Ω—è.')

@dp.message_handler(commands=['soup'])
async def start_command(message : types.Message):
    await message.answer('–ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –≥–æ—Ç–æ–≤–∫–µ üßÖüßÑü•ïü•îüî™')
    time.sleep(1)
    await message.answer('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫.')
    time.sleep(1)
    await message.answer('–°—É–ø—á–∏–∫ –¥–Ω—è:...')
    time.sleep(1)
    await message.answer(random.choice(soup_list))

@dp.message_handler(commands=['run'])
async def run_command(message : types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if check_chats(chat_id):
        if check_user_id(chat_id, user_id):
            if check_date(chat_id):
                await message.answer('–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è –∑–∞–ø—É—â–µ–Ω–∞.')
                time.sleep(1)
                await message.answer('–°–ª—É—à–∞–µ–º —á—Ç–æ —à–µ–ø—á—É—Ç —É–ª–∏—Ü—ã.')
                time.sleep(1)
                await message.answer('–ì–∞–¥–∞–µ–º –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ.')
                time.sleep(1)
                await message.answer('–ü–æ–¥—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –≤ –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å.')
                time.sleep(1)
                await message.answer('–¢—ã –Ω–µ –ø–æ–≤–µ—Ä–∏—à—å!')
                time.sleep(1)
                await message.answer('–ü–æ—Ö–æ–∂–µ, —á—Ç–æ...')
                time.sleep(1)
                await message.answer('üåù')
                time.sleep(1)
                winner = get_winner(chat_id)
                await message.answer('üèÜ –ö—Ä–∞—Å–∞–≤—á–∏–∫ –¥–Ω—è: ' + winner)
                update_score_and_date(chat_id, winner)
            else:
                today_winner = get_today_winner(chat_id)
                await message.answer(f'–ò–≥—Ä–∞ —É–∂–µ –±—ã–ª–∞ —Å–µ–≥–æ–¥–Ω—è!\n–í—ã–∏–≥—Ä–∞–ª {today_winner}\n–ù–∞–∂–º–∏ /stat , —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.')
        else:
            await message.reply('—Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /join')
    else:
        await message.reply('—Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /join')
    

@dp.message_handler(commands=['join'])
async def join_command(message : types.Message):
    today = get_today()
    yesterday = today - timedelta(days=1)
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = message.from_user.username
    if username == None:
        await message.reply(f'–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É —Ç–µ–±—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –≥—Ä–∞—Ñ–∞:\n–ò–º—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram. –ü–æ–∫–∞ —á—Ç–æ —Ç–≤–æ—ë –∏–º—è –≤ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –±—É–¥–µ—Ç —Ç–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º \
id: {user_id}. –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—ë –∏–º—è –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã –Ω–∞–∂–º–∏ /name .')
        username = user_id
    else:
        username = '@' + message.from_user.username
    for_users = (chat_id, user_id, username, 0)
    for_chats = (chat_id, yesterday)
    if check_chats(chat_id):
        if check_user_id(chat_id, user_id):
            await message.answer(username + ' —Ç—ã —É–∂–µ –≤ –∏–≥—Ä–µ')
        else:
            cursor_insert(connection, insert_users, for_users)
            await message.reply('–¢–µ–ø–µ—Ä—å —Ç—ã –≤ –∏–≥—Ä–µ')
    else:
        cursor_insert(connection, insert_chats, for_chats)
        cursor_insert(connection, insert_users, for_users)
        await message.reply('–¢–µ–ø–µ—Ä—å —Ç—ã –≤ –∏–≥—Ä–µ')

@dp.message_handler(commands=['stat'])
async def join_command(message : types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if check_chats(chat_id):
        if check_user_id(chat_id, user_id):
            statkd = get_stat(chat_id)            
            await message.answer(statkd)
        else:
            await message.reply('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /join')
    else:
        await message.reply('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ /join')

@dp.message_handler(commands=['name'])
async def run_command(message : types.Message):
    await Form.name.set()
    await message.reply('–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –Ω–æ–≤–æ–µ –∏–º—è:')

@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    new_name = message.text
    change_name(user_id, new_name)
    await message.reply('–¢–µ–ø–µ—Ä—å —Ç–µ–±—è –∑–æ–≤—É—Ç ' + new_name)


@dp.message_handler(commands=['end'])
async def join_command(message : types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if check_chats(chat_id):
        if check_user_id(chat_id, user_id):
            delete_user(chat_id, user_id)
            await message.reply('–¢—ã –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É')
        else:
            await message.reply('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É.')
    else:
        await message.reply('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∏–≥—Ä—É.')


executor.start_polling(dp, skip_updates=True)